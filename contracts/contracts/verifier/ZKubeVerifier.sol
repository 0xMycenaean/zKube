//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.6.11;

library Pairing {
  struct G1Point {
    uint256 X;
    uint256 Y;
  }
  // Encoding of field elements is: X[0] * z + X[1]
  struct G2Point {
    uint256[2] X;
    uint256[2] Y;
  }

  /// @return the generator of G1
  function P1() internal pure returns (G1Point memory) {
    return G1Point(1, 2);
  }

  /// @return the generator of G2
  function P2() internal pure returns (G2Point memory) {
    // Original code point
    return
      G2Point(
        [
          11559732032986387107991004021392285783925812861821192530917403151452391805634,
          10857046999023057135944570762232829481370756359578518086990519993285655852781
        ],
        [
          4082367875863433681332203403145435568316851327593401208105741076214120093531,
          8495653923123431417604973247489272438418190587263600148770280649306958101930
        ]
      );

    /*
        // Changed by Jordi point
        return G2Point(
            [10857046999023057135944570762232829481370756359578518086990519993285655852781,
             11559732032986387107991004021392285783925812861821192530917403151452391805634],
            [8495653923123431417604973247489272438418190587263600148770280649306958101930,
             4082367875863433681332203403145435568316851327593401208105741076214120093531]
        );
*/
  }

  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
  function negate(G1Point memory p) internal pure returns (G1Point memory r) {
    // The prime q in the base field F_q for G1
    uint256 q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);
    return G1Point(p.X, q - (p.Y % q));
  }

  /// @return r the sum of two points of G1
  function addition(G1Point memory p1, G1Point memory p2)
    internal
    view
    returns (G1Point memory r)
  {
    uint256[4] memory input;
    input[0] = p1.X;
    input[1] = p1.Y;
    input[2] = p2.X;
    input[3] = p2.Y;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
      // Use "invalid" to make gas estimation work
      switch success
      case 0 {
        invalid()
      }
    }
    require(success, "pairing-add-failed");
  }

  /// @return r the product of a point on G1 and a scalar, i.e.
  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
  function scalar_mul(G1Point memory p, uint256 s)
    internal
    view
    returns (G1Point memory r)
  {
    uint256[3] memory input;
    input[0] = p.X;
    input[1] = p.Y;
    input[2] = s;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
      // Use "invalid" to make gas estimation work
      switch success
      case 0 {
        invalid()
      }
    }
    require(success, "pairing-mul-failed");
  }

  /// @return the result of computing the pairing check
  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
  /// return true.
  function pairing(G1Point[] memory p1, G2Point[] memory p2)
    internal
    view
    returns (bool)
  {
    require(p1.length == p2.length, "pairing-lengths-failed");
    uint256 elements = p1.length;
    uint256 inputSize = elements * 6;
    uint256[] memory input = new uint256[](inputSize);
    for (uint256 i = 0; i < elements; i++) {
      input[i * 6 + 0] = p1[i].X;
      input[i * 6 + 1] = p1[i].Y;
      input[i * 6 + 2] = p2[i].X[0];
      input[i * 6 + 3] = p2[i].X[1];
      input[i * 6 + 4] = p2[i].Y[0];
      input[i * 6 + 5] = p2[i].Y[1];
    }
    uint256[1] memory out;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(
        sub(gas(), 2000),
        8,
        add(input, 0x20),
        mul(inputSize, 0x20),
        out,
        0x20
      )
      // Use "invalid" to make gas estimation work
      switch success
      case 0 {
        invalid()
      }
    }
    require(success, "pairing-opcode-failed");
    return out[0] != 0;
  }

  /// Convenience method for a pairing check for two pairs.
  function pairingProd2(
    G1Point memory a1,
    G2Point memory a2,
    G1Point memory b1,
    G2Point memory b2
  ) internal view returns (bool) {
    G1Point[] memory p1 = new G1Point[](2);
    G2Point[] memory p2 = new G2Point[](2);
    p1[0] = a1;
    p1[1] = b1;
    p2[0] = a2;
    p2[1] = b2;
    return pairing(p1, p2);
  }

  /// Convenience method for a pairing check for three pairs.
  function pairingProd3(
    G1Point memory a1,
    G2Point memory a2,
    G1Point memory b1,
    G2Point memory b2,
    G1Point memory c1,
    G2Point memory c2
  ) internal view returns (bool) {
    G1Point[] memory p1 = new G1Point[](3);
    G2Point[] memory p2 = new G2Point[](3);
    p1[0] = a1;
    p1[1] = b1;
    p1[2] = c1;
    p2[0] = a2;
    p2[1] = b2;
    p2[2] = c2;
    return pairing(p1, p2);
  }

  /// Convenience method for a pairing check for four pairs.
  function pairingProd4(
    G1Point memory a1,
    G2Point memory a2,
    G1Point memory b1,
    G2Point memory b2,
    G1Point memory c1,
    G2Point memory c2,
    G1Point memory d1,
    G2Point memory d2
  ) internal view returns (bool) {
    G1Point[] memory p1 = new G1Point[](4);
    G2Point[] memory p2 = new G2Point[](4);
    p1[0] = a1;
    p1[1] = b1;
    p1[2] = c1;
    p1[3] = d1;
    p2[0] = a2;
    p2[1] = b2;
    p2[2] = c2;
    p2[3] = d2;
    return pairing(p1, p2);
  }
}

contract ZKubeVerifier {
  using Pairing for *;
  struct VerifyingKey {
    Pairing.G1Point alfa1;
    Pairing.G2Point beta2;
    Pairing.G2Point gamma2;
    Pairing.G2Point delta2;
    Pairing.G1Point[] IC;
  }
  struct Proof {
    Pairing.G1Point A;
    Pairing.G2Point B;
    Pairing.G1Point C;
  }

  function verifyingKey() internal pure returns (VerifyingKey memory vk) {
    vk.alfa1 = Pairing.G1Point(
      20491192805390485299153009773594534940189261866228447918068658471970481763042,
      9383485363053290200918347156157836566562967994039712273449902621266178545958
    );

    vk.beta2 = Pairing.G2Point(
      [
        4252822878758300859123897981450591353533073413197771768651442665752259397132,
        6375614351688725206403948262868962793625744043794305715222011528459656738731
      ],
      [
        21847035105528745403288232691147584728191162732299865338377159692350059136679,
        10505242626370262277552901082094356697409835680220590971873171140371331206856
      ]
    );
    vk.gamma2 = Pairing.G2Point(
      [
        11559732032986387107991004021392285783925812861821192530917403151452391805634,
        10857046999023057135944570762232829481370756359578518086990519993285655852781
      ],
      [
        4082367875863433681332203403145435568316851327593401208105741076214120093531,
        8495653923123431417604973247489272438418190587263600148770280649306958101930
      ]
    );
    vk.delta2 = Pairing.G2Point(
      [
        11559732032986387107991004021392285783925812861821192530917403151452391805634,
        10857046999023057135944570762232829481370756359578518086990519993285655852781
      ],
      [
        4082367875863433681332203403145435568316851327593401208105741076214120093531,
        8495653923123431417604973247489272438418190587263600148770280649306958101930
      ]
    );
    vk.IC = new Pairing.G1Point[](130);

    vk.IC[0] = Pairing.G1Point(
      17870218136561810414144172830826647489364083677645270806243553194064318863207,
      20129849367670583494369525834769846533154971442606619277305955271879541554311
    );

    vk.IC[1] = Pairing.G1Point(
      11385311452229628729439866520127761945653856316197546907583211206085707154619,
      21464556659143874622963058547165764125497949016569565810459516362575715414424
    );

    vk.IC[2] = Pairing.G1Point(
      16308162700229605767441195021810274181211073502037764126526702712696988465165,
      14332723997212300681858098349953192621425727908563601918200792852929769852796
    );

    vk.IC[3] = Pairing.G1Point(
      4039786928747575646502616315029530942028185067852284015421714083962198500288,
      7294661396852303807907687691951389052955859666410790892250071669305447327841
    );

    vk.IC[4] = Pairing.G1Point(
      5686727538059795745929243421023448635060349291753050280333141097492570590828,
      15909753133066034241038092651259881949611939063580886126562392905756999437342
    );

    vk.IC[5] = Pairing.G1Point(
      9719589312943859044741524609826839570181374494508465844093633769159260308554,
      15928419786731462433291757959430273615274363483028763484527367190467159169755
    );

    vk.IC[6] = Pairing.G1Point(
      11963234126476217879914738394904397188962347839664487932935465682416445938988,
      19010232684634278157412774976879602267075077368722115466189209359593759247248
    );

    vk.IC[7] = Pairing.G1Point(
      3620706875008895323266029715069321402043153321315935228040497824638969811265,
      3449687845772582446191675709121447002151036261170369063773636147236998215524
    );

    vk.IC[8] = Pairing.G1Point(
      11229580090130283178434779681783848727751228936051678372919114872388611847955,
      17277312412042494662743066289647964853425280247966536573867644319667043833333
    );

    vk.IC[9] = Pairing.G1Point(
      16527523553667430944359228193607208676797162633727664477014190672012694750154,
      15043808934484121857335919084147757118732579675413253038522093326128802358323
    );

    vk.IC[10] = Pairing.G1Point(
      13994204640819857292976924125830024803952854042127490059187757988204840291808,
      7773041599770875954265626842694081592155412905873634173431193537537551671639
    );

    vk.IC[11] = Pairing.G1Point(
      14115924636850717520068748590623953278816508058231435236653852557460959170367,
      11183254984442835247590338314287928678489816367155460793899144338710431551992
    );

    vk.IC[12] = Pairing.G1Point(
      9174722766560983198487679352322950872758186489981290646111568271759753591250,
      20064595949374687177211344726712536620438647571615988560707782946585647551756
    );

    vk.IC[13] = Pairing.G1Point(
      14075348978058143307033888347260871429843655036920556063589058694764281683502,
      17620956048592550043123425643213841626731503413382654143487988803552312329138
    );

    vk.IC[14] = Pairing.G1Point(
      6651712250801923403164401093437020665640691367743520741822479851894549105847,
      9982324661155772080242956525942125417788377544940962892287259244700012674180
    );

    vk.IC[15] = Pairing.G1Point(
      9207554985504713475259353588786560206620166404757075595968923769871426675837,
      17519301769894555947521650541206145883949860779758739450190163081824227041808
    );

    vk.IC[16] = Pairing.G1Point(
      15573445020585391781359669064322145458858254499570537518507278830911313056718,
      557814888187403536693473601452462268949263280946168473628582153197315646066
    );

    vk.IC[17] = Pairing.G1Point(
      15708809017324902953446528080104531285159872910959425049477873183376241680464,
      7673431083899105845065619628547953629579119467316330346771537281573483016569
    );

    vk.IC[18] = Pairing.G1Point(
      9213553898697777575545515890593390470769177114133300727959724035399411049299,
      14878200413554128205221753048786717301948643307307338816573207419740588862512
    );

    vk.IC[19] = Pairing.G1Point(
      19747695643134987839151723181004371438250054072980767311052034527796794400023,
      13220190305431002515776828776503033442871458204637980693870544506392456155429
    );

    vk.IC[20] = Pairing.G1Point(
      14913346125098147920156213819665440448339894670539513808177492546003547298745,
      4077101796052676165023845846365328350860253227830280284921606440714293437418
    );

    vk.IC[21] = Pairing.G1Point(
      13936728397980535437366405658294524215584728068098189218322236592836279913674,
      17073971066361714482749961408306052701746095835259246785360806852442337736766
    );

    vk.IC[22] = Pairing.G1Point(
      2716873411639155474622155492276106279233672089421779443289451353014793259135,
      19799494278867013460875712710164377824152637247443084733218717568244031058422
    );

    vk.IC[23] = Pairing.G1Point(
      18216144483096881024088520606798079710512104781407664283579507017568948448960,
      1261383138491092177186444344873419857485942662851604562969139386325006645441
    );

    vk.IC[24] = Pairing.G1Point(
      19863019125347726418136435422144564269833604570385052853692883281029555693647,
      5321149698580490551192108276848560216748250013563234582764531199061677921701
    );

    vk.IC[25] = Pairing.G1Point(
      18156141017597221230577978361361059142855734890354594497238715353018654359658,
      8043117291307393649779972852237875480234862860477676623662091074384592902803
    );

    vk.IC[26] = Pairing.G1Point(
      3579753310720372831145100090482706760280374489610725971396507513484647679732,
      19729537121633118430940577980834963700326003609643196965842414686958919543350
    );

    vk.IC[27] = Pairing.G1Point(
      8060083552120392907033588118163541865936175900316366704541981091819504671177,
      7282141371120747250996582282215555049392661792659459655953109066092383408835
    );

    vk.IC[28] = Pairing.G1Point(
      12385405796395831969929138654924294588129980206379593185245132380625875240009,
      20556434810034530106721031669271553041428924061715543957377405975733669850149
    );

    vk.IC[29] = Pairing.G1Point(
      4071418004324621060367316568661825778347948530970009148493235312292297794662,
      1839816845127618364868504081055768382670944619137153141164047410101806872178
    );

    vk.IC[30] = Pairing.G1Point(
      20871250592084836643836631646926066891768124876247119258208864541578593294164,
      5674582916442187820313149938159141196303877781892304006662496012560291925225
    );

    vk.IC[31] = Pairing.G1Point(
      18238948798366624308185117055107945867287458773382877890623742603748136342016,
      16176407382403713559929115870584458575609732011515294051417539148114690402962
    );

    vk.IC[32] = Pairing.G1Point(
      877635736495839896049011440246592834870950732528303697364828747219041362747,
      9952115490447461937388919859295687553434617434746574187338638145375644914076
    );

    vk.IC[33] = Pairing.G1Point(
      4789257529974879177193982816623817721067495056873363135188004151200786678762,
      17370249687799083557596125858833269483745444728888445292360508476924353787871
    );

    vk.IC[34] = Pairing.G1Point(
      15394459281980724291834403773592859173698272852301031259627573803424418712730,
      1582116250379141056134190501389853688270155838077753378796751856651569272546
    );

    vk.IC[35] = Pairing.G1Point(
      16048206367144326042295782169662686109484352649486771157215273036646015614134,
      20851875905236657645987479903137543193912439816135925230772470424235187624304
    );

    vk.IC[36] = Pairing.G1Point(
      2186107902783007371943710969566509767681329858729446294708467420111372396718,
      5178526930054168209897108030165117839027298926132860574579013296814868952289
    );

    vk.IC[37] = Pairing.G1Point(
      18580368653810077900076729330580005618007498694422031604959555205572411915197,
      1080732438987026119979814384921950492770258615365312486391622859045341479995
    );

    vk.IC[38] = Pairing.G1Point(
      11922293805775187033769787165019152635465605801598992653179410928104820968677,
      12228468124354200198989613028932101323482262269187925852374535676635208747603
    );

    vk.IC[39] = Pairing.G1Point(
      5653838675534605607714425385587028436045251829245744514347235872328103647961,
      5847939615426274519102527303801930885879936602347840270973784893101542775701
    );

    vk.IC[40] = Pairing.G1Point(
      4350219203714101276207614879093165157565838735183574813027989455226933542032,
      20976235802060933219224410879795863529034828650341986257644637929387008165321
    );

    vk.IC[41] = Pairing.G1Point(
      17719957368002082319818138261760781257798456368130199190997717769570726585987,
      4848861278501358943952580060321727811156811136153929130573611263598148718128
    );

    vk.IC[42] = Pairing.G1Point(
      14235518862863167421738016367050061367459575473575917947737609072213198176424,
      1601400095211430526416649476403569819616683245068420683311563457645622234088
    );

    vk.IC[43] = Pairing.G1Point(
      18569280990471224491264202322951559408547031104802763530754723626169078573934,
      1315395531301747620808233232074767065678551545744729575453315750294338444890
    );

    vk.IC[44] = Pairing.G1Point(
      18046645426833740296230188393724110794919541631888510753564456745069248576371,
      523534149360286775757661332426999403208667357780638048292602172270733571325
    );

    vk.IC[45] = Pairing.G1Point(
      5335745448704984893092425919477212401575164763355815796867042757560255640482,
      9429036017412785446519154497675808642611323968408672483137729888193475389702
    );

    vk.IC[46] = Pairing.G1Point(
      14869400444207652591734272740861281422136505221242976944775914434302110004339,
      2113455263958639984893756755495530875320742599391235117670239801822745630558
    );

    vk.IC[47] = Pairing.G1Point(
      13153088680301612373769743397639303472859943729038334308316038643418066789110,
      11457773968312536796834932196724268340618102522541923858698244676432134009944
    );

    vk.IC[48] = Pairing.G1Point(
      2071468214037227579564498319473882081459414489782734205429565946767304620859,
      1013682772886211675044257789678848120939326911492457993637919303909283872634
    );

    vk.IC[49] = Pairing.G1Point(
      3889463456593850440533158957809597855178027354324740223753830537698982488412,
      18743759028157216121452187245503234320854385547596794321472468144217688126414
    );

    vk.IC[50] = Pairing.G1Point(
      15947781314280344247526450634212402329602250765569954143356130700578423916838,
      6999321007971131852702755510905440896423217132610562758152178395464801703333
    );

    vk.IC[51] = Pairing.G1Point(
      10979562742694789789945995393796351628761340308115317002746104208767926558087,
      17048697834884631802808109871003805086909524951871295060604036705901085644020
    );

    vk.IC[52] = Pairing.G1Point(
      19918087568880657089063865955500854628485149247487985730903593672747382485762,
      6395480546726530149139087781256435393109010569043898644320424085888333268501
    );

    vk.IC[53] = Pairing.G1Point(
      19589272523520765853109351453653305867794627102732926951096728921959611077585,
      7943713688449593199401587743505067401242071828578006271803667894691502815573
    );

    vk.IC[54] = Pairing.G1Point(
      5052919107812069422989983934913251597246280590504293759702589206926908526556,
      11555754178549076626899728664116415719955334511351290918848649581831501927639
    );

    vk.IC[55] = Pairing.G1Point(
      2076517956869024608220057412499433782970290714314542061021197108351844962160,
      13114282286382278835039222334441855272549160682333344276914810232586889905155
    );

    vk.IC[56] = Pairing.G1Point(
      4738787399154242251043504427673552522425692517268772276564867418884294568862,
      7916412018758333785860535462673103653531943831285083673683940683077043809401
    );

    vk.IC[57] = Pairing.G1Point(
      20844388519678391510809866105491906641270980645415816612856058033030884175471,
      19878572581665323204092053197850977817170350894094114438684702368975834079500
    );

    vk.IC[58] = Pairing.G1Point(
      8859987811248956015410605933634855265305946740471968919339520216674084417158,
      19370949421663975448107142831745666922337811042905609297353529104257066196122
    );

    vk.IC[59] = Pairing.G1Point(
      21297206647911286270119871741928664475819289465331371811162075268095475648514,
      15576312537607029311927400482541239150759752162626431628091204674897770574080
    );

    vk.IC[60] = Pairing.G1Point(
      9557668413878710173838239548378763280262275161230614506314316420616462605836,
      13326937002124147425896642383891117197468419892896456488511252785821871714077
    );

    vk.IC[61] = Pairing.G1Point(
      15900715785216004170303471293932021686548008478848691979965406053335336331960,
      8035044801271294334686851112762257056644325475836092482463624900316396276895
    );

    vk.IC[62] = Pairing.G1Point(
      2746303684361054717037972298706370365594992934132628772221422629365985607087,
      10158132454347664980387671097172356540016873127051834671936757243965583521747
    );

    vk.IC[63] = Pairing.G1Point(
      7400349230995853912451347878082988463174638047570523890228495027384209065668,
      4998973726516308761200051057162206861226953478081938477736643775329752472272
    );

    vk.IC[64] = Pairing.G1Point(
      10555288684965491449162132042700208483236258371500186498893959538281753909682,
      16668853118272976918568642067757824131742093736217632745359625356459301724291
    );

    vk.IC[65] = Pairing.G1Point(
      15247392813385753862738941878745690574142751227199398164215446796984429736493,
      3078092996684202333047110983688756190615035929111200593410718028585533034077
    );

    vk.IC[66] = Pairing.G1Point(
      1702275636540135867594026225556005224394608211865391802387072751740839673636,
      1599780212170936834100907754691265556254720949558864615469595609146911333220
    );

    vk.IC[67] = Pairing.G1Point(
      8960506747702888312993908160070347055047632215060032275454424361801171285817,
      269162245769587688643411263559966321045248373891213843513297608156403638326
    );

    vk.IC[68] = Pairing.G1Point(
      7116431660862768560710191426920816287196208245578424671329492500523923331108,
      21467746881621812143964464761758530370815137278111761576866773391848562140554
    );

    vk.IC[69] = Pairing.G1Point(
      14279914657192014117329470656464338486024897221194741254436182555954488189382,
      4296459843537559869750545149809023748847799428903880441089861211797253330063
    );

    vk.IC[70] = Pairing.G1Point(
      7166026326219092167117825214230178808064323661229075080143232158273351971850,
      19160962476792107733993330290181094089019927263830594583113540944922359095170
    );

    vk.IC[71] = Pairing.G1Point(
      4356075344243067255562109029595193397071416349330661323004571963737772075208,
      12810327103430273257035138853348765595475505959400677753817143070593554645070
    );

    vk.IC[72] = Pairing.G1Point(
      5345696581295294251514160359243758899706064534510065329555946568502012934798,
      18685244161336535415754629080928678502768684639046673090884043706616970369452
    );

    vk.IC[73] = Pairing.G1Point(
      834433388081066759853649279490184706164518373937109757468413035206099007484,
      9550554638559311928418365094766093177628548778394922345469372845795998760396
    );

    vk.IC[74] = Pairing.G1Point(
      11291687310192617472138943770741113804646673155783396731892295674548622253611,
      19473784087998601362594766726803144565787282031844126029384804290060833344438
    );

    vk.IC[75] = Pairing.G1Point(
      5186379561960569250118095068157769780315028629345131503907161201917606851178,
      11335390930651081915630779418245338181554028362902966062835323581386433682721
    );

    vk.IC[76] = Pairing.G1Point(
      2911682698369270921846244060203244785861928411641406276966835236874733365989,
      1146863773589036626716258659911240844603819384136269589436872497150724399678
    );

    vk.IC[77] = Pairing.G1Point(
      19901055891716050435924109113941701337368007726499056389696485332382158892320,
      6903408336572181391311475448847842542133598383421626255073904740876764474633
    );

    vk.IC[78] = Pairing.G1Point(
      21434394865277548917698522067656457006987202665539924327319254112482286275389,
      7649794760597647156181399914315345947751112512093482976871825225812087425097
    );

    vk.IC[79] = Pairing.G1Point(
      10634768754978618705052500936045254352755655700660771843487030523406339877089,
      14434894092564868170775477983685111381375377193295574963070392123521615443163
    );

    vk.IC[80] = Pairing.G1Point(
      20556496274936389862438556399855398145396645365451146919535929432774710857548,
      9150058830168524380253952594886051862646002948802246219128896808906822835201
    );

    vk.IC[81] = Pairing.G1Point(
      14829305592373224198645107935970333751929810791293332056326404780339480055808,
      143535447882010748762183636038481787316381841297243401351902133541325040766
    );

    vk.IC[82] = Pairing.G1Point(
      21564705660040144114413653715017299240632760306578280029429068943940994071554,
      7222675450918799806824019585452642831913325875396194386065784796313362705745
    );

    vk.IC[83] = Pairing.G1Point(
      5534682278154705565244027576474728017540764752086576146602979746971136111359,
      6400012378995454934805518042708110635896286726558138511772602446269343580761
    );

    vk.IC[84] = Pairing.G1Point(
      5206721975252908493534511507351428739016284870612077623507164870011228944971,
      7019892939552639097058875498258465123539672495536340568758700534110490105377
    );

    vk.IC[85] = Pairing.G1Point(
      3598192227163872972197862942902924230931192174712449859429909261042157326907,
      3627590383864275906139992593843963314778553436152014951236331599382245698002
    );

    vk.IC[86] = Pairing.G1Point(
      21649129488916235170415740118316602784437447938767385903590874834473289312101,
      16267726965450236799052469998137064913276593694262105988203391776689092609664
    );

    vk.IC[87] = Pairing.G1Point(
      2817429595813058651031432737505556257545324428539967220213777969406766538886,
      14172325307532387918376250894553031173929316021694003077150433170376465099159
    );

    vk.IC[88] = Pairing.G1Point(
      11944822687692728721192238907903016193972944663126772043763076353006259416711,
      7579702090205951963823777737345455200112814930992878573379922827507444792963
    );

    vk.IC[89] = Pairing.G1Point(
      9638175008511059535359307674230536933323770134471850164648409304515827989362,
      14842431382849294906483223402280763904776432232917436785291423432949690633156
    );

    vk.IC[90] = Pairing.G1Point(
      5889410576066878190271322328155911685418997661705774415529862798560076008862,
      10380425617914118186980744028125864697244756995625511180074316896733979278872
    );

    vk.IC[91] = Pairing.G1Point(
      11377843527605907558182231437744608632674938729240568083419421389211920879747,
      547122159529261458293545227808132807687100636977639518866386679752418631000
    );

    vk.IC[92] = Pairing.G1Point(
      10646774305665024785229025096940922585573756623758183095995753884657328233079,
      7838789767016841343644369232857778453215045527094789684249000644932445678978
    );

    vk.IC[93] = Pairing.G1Point(
      10673690519053860838588362036852533675434842652608087824969736144451303586428,
      16662062993870241394132976885188725669089247606428645131860183708467264356393
    );

    vk.IC[94] = Pairing.G1Point(
      15751482534087113269077495296822913030404518950602226049520005416583740410913,
      6293724002098521228836844831400774532214787227647398272788898799782752570853
    );

    vk.IC[95] = Pairing.G1Point(
      15279923252361889830487378268176405442421473289774531757324814236164561730506,
      5161473826912714999862875520647672982779181047821042160704118444368714946513
    );

    vk.IC[96] = Pairing.G1Point(
      288258588322572107179321312313875600775687638446351729919653978478313398638,
      7188912985359589755459776828176486836360071359209420667379081050483017115523
    );

    vk.IC[97] = Pairing.G1Point(
      16665029689031277382546825059030187885728657916100110602782281024234634142086,
      9490188032854316701293837421874581201106024783283815961405336133328823176243
    );

    vk.IC[98] = Pairing.G1Point(
      3443000551304354949485575768447180830483385204676147355397529444923104692250,
      7941594215515929038826338349216336081919612874628891056312925144102304793094
    );

    vk.IC[99] = Pairing.G1Point(
      20040758245353752506627106668779388310144604257808119268353132923182620172445,
      21855597350452751617762275417251848736271009632732880784838838733252350235661
    );

    vk.IC[100] = Pairing.G1Point(
      3806135385693695226905405033588704983904059202134920603286909021857749871117,
      11916745379931850489801057580751053294515442023280229950822249556023935364701
    );

    vk.IC[101] = Pairing.G1Point(
      1758043293559469593638925296274408517907782689391017245086078320085290693494,
      8399863588088037170463394798591986545663282799925138786830395916062211214334
    );

    vk.IC[102] = Pairing.G1Point(
      1796883007044231706845944013641146571452502809784209099352178869621518899497,
      12689156399566038170414441927003803022550511582199823462188637775761580245410
    );

    vk.IC[103] = Pairing.G1Point(
      18912373441430534223558403174910484076863161341959329282265310597277069487010,
      4838723529565258481355045444733180985495545738127343043889563935757157335583
    );

    vk.IC[104] = Pairing.G1Point(
      3948014828270588141634569636843507217693288845989951339255248826229080836554,
      21257236337302076313741618466535803488078802676352570360487379573014946292118
    );

    vk.IC[105] = Pairing.G1Point(
      18964044637586409958059816398361694577626217491717367457477136584566436622369,
      9457262088601927804067454055147380281175926657705156201957309680284401915708
    );

    vk.IC[106] = Pairing.G1Point(
      19014585319555914074861709037779749287432859158591631345442442305789963805729,
      6341429031570999097064267142970204926492474424930522170689999654003335993099
    );

    vk.IC[107] = Pairing.G1Point(
      1672258648726715079849414758596877988003147841336203645710559516592678785143,
      9478617628381612021704515876033611859480428262954756282049527387225611168889
    );

    vk.IC[108] = Pairing.G1Point(
      11193215817825248827558908497350815161494917091350059777988816014991191618067,
      12755126626627429554313284419237621462196534249013220800698321849910267712037
    );

    vk.IC[109] = Pairing.G1Point(
      21046181177346212321112385849408326590170378305162136311526586006260566842803,
      10265093005959152569906821040954542776071006237489725381753333602312463099421
    );

    vk.IC[110] = Pairing.G1Point(
      12826150972966310254979497908203368265684770377353683572251007500242333438474,
      15879948764932529666254043283637100685731919280590103580787627196149752029046
    );

    vk.IC[111] = Pairing.G1Point(
      9186415489143811448506081554210668642126810740826031602633662487145217353345,
      1759902686063321407424651115438926537806306390194487215889837362941829012833
    );

    vk.IC[112] = Pairing.G1Point(
      3635448621148793732644057613092132642837082146508640875443048868046661374582,
      6880964757339502874296380324282268318628275029225906124649799305155545226881
    );

    vk.IC[113] = Pairing.G1Point(
      20241142354933736402556483626713142457523480384256589739885745353224740876826,
      10547414560041699717741854773230914216487787315312848778200795879029519706346
    );

    vk.IC[114] = Pairing.G1Point(
      6721652942803232890910958481118496255899369600153823517216647494339142102639,
      2976332345590711742436170758070009741738798643253256287884854323455664888276
    );

    vk.IC[115] = Pairing.G1Point(
      7055261081680263251973400605612322975007077355648487185975466675119446918691,
      16955768865034498957731975831002999042653741422480023334425236388856128905962
    );

    vk.IC[116] = Pairing.G1Point(
      15258554332250079595305786416986835804029292762739944639853744454564278984360,
      6562642996406088476446661384721601294462053719849590756995219877323554857045
    );

    vk.IC[117] = Pairing.G1Point(
      13428385963246897911584987233277294750377243909131529866993779041530003179353,
      17854755441966853464182821549925638569490970389911173573975182160873581863411
    );

    vk.IC[118] = Pairing.G1Point(
      19159994556321768199344218365053247189765147215011133456100415076740926340886,
      17661436802765072809723935017217498422991517804541539391749576561556157795450
    );

    vk.IC[119] = Pairing.G1Point(
      20573687074066792745113536871456502350831713329723642686342689264158126279050,
      316394694132330774369239592299012047591057599130239924834662809438937145606
    );

    vk.IC[120] = Pairing.G1Point(
      3083921670249343186513339986357389154861452055533124726361959577038923882158,
      8068019346772689921852743022706547125632553849209926111129044878185924011603
    );

    vk.IC[121] = Pairing.G1Point(
      9476281961616799311443303265910063184101035792777199875105376628187922576978,
      14674160529149894888125533739011521895677016946438942061847556893632629673228
    );

    vk.IC[122] = Pairing.G1Point(
      6339843043191718605067166445751245468993164797061609421366759386895486418550,
      11009571514903525886271134714395744672747454534118264960391712050031974268876
    );

    vk.IC[123] = Pairing.G1Point(
      915510274649206288524095459719738061401184257793161561215259111440364386516,
      6575144925032542720111832230977392255566402056580427124444623568452582817132
    );

    vk.IC[124] = Pairing.G1Point(
      2347983941381805733798714180537127552792449077596059996072089837535131635455,
      21348227641699344834645909702990968689100699930330504124507393981771360644737
    );

    vk.IC[125] = Pairing.G1Point(
      18440292655043922092526751035992650208619724721512513293368103957701097907141,
      1397866151007972060490544800591726558784755732486820350616839806021162985067
    );

    vk.IC[126] = Pairing.G1Point(
      16756785970876752591613125949794526469903158915928734423502725818224300790895,
      21813516681362071762010689923997962223994621038246392929313432454394945099616
    );

    vk.IC[127] = Pairing.G1Point(
      9747796659081161508125728672927997645677225609203348250507560252541046597621,
      4620995723824090589911135553142762594550998683960766366500759426830413209953
    );

    vk.IC[128] = Pairing.G1Point(
      7780069874949182409032867191260007376201103058523730383507340888127875942450,
      13853690545579041562514212140392877167346967652712274880149958850687280392641
    );

    vk.IC[129] = Pairing.G1Point(
      13960489804054726357987423943491132329013597798906365890127357091093577511923,
      1442931464175978785608992952726103121794650344475231387798417846756886322923
    );
  }

  function verify(uint256[] memory input, Proof memory proof)
    internal
    view
    returns (uint256)
  {
    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    VerifyingKey memory vk = verifyingKey();
    require(input.length + 1 == vk.IC.length, "verifier-bad-input");
    // Compute the linear combination vk_x
    Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
    for (uint256 i = 0; i < input.length; i++) {
      require(input[i] < snark_scalar_field, "verifier-gte-snark-scalar-field");
      vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
    }
    vk_x = Pairing.addition(vk_x, vk.IC[0]);
    if (
      !Pairing.pairingProd4(
        Pairing.negate(proof.A),
        proof.B,
        vk.alfa1,
        vk.beta2,
        vk_x,
        vk.gamma2,
        proof.C,
        vk.delta2
      )
    ) return 1;
    return 0;
  }

  /// @return r  bool true if proof is valid
  function verifyProof(
    uint256[2] memory a,
    uint256[2][2] memory b,
    uint256[2] memory c,
    uint256[129] memory input
  ) public view returns (bool r) {
    Proof memory proof;
    proof.A = Pairing.G1Point(a[0], a[1]);
    proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
    proof.C = Pairing.G1Point(c[0], c[1]);
    uint256[] memory inputValues = new uint256[](input.length);
    for (uint256 i = 0; i < input.length; i++) {
      inputValues[i] = input[i];
    }
    if (verify(inputValues, proof) == 0) {
      return true;
    } else {
      return false;
    }
  }
}
