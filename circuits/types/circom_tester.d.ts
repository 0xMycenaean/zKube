/** Declaration file generated by dts-gen */
declare module "circom_tester" {
  interface Options {
    include?: string | string[];
    sym?: boolean;
    r1cs?: boolean;
    json?: boolean;
    output?: string;
    prime?: string;
    O?: 0 | 1;
    verbose?: boolean;
    inspect?: boolean;
    recompile?: boolean;
    compile?: boolean;
    wasm?: boolean;
  }

  interface CircuitSymbol {
    labelIdx: number;
    varIdx: number;
    componentIdx: number;
  }

  type Symbols = Record<string, CircuitSymbol>;

  interface WitnessCalculator {
    calculateWitness(input: unknown, sanityCheck?: boolean): Promise<bigint[]>;
  }

  class WasmTester {
    constructor(
      dir: string,
      baseName: string,
      witnessCalculator: WitnessCalculator
    );

    symbols: Symbols;

    calculateWitness(input: unknown, sanityCheck?: boolean): Promise<bigint[]>;

    loadSymbols(): Promise<void>;

    checkConstraints(witness: bigint[]): Promise<void>;

    assertOut(actual: unknown, expected: unknown): Promise<void>;
  }

  export function wasm(
    circomInput: string,
    options?: Options
  ): Promise<WasmTester>;
}
